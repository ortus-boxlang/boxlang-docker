name: Release

on:
  push:
    branches:
      - main
      - development
    tags:
      - v*
  repository_dispatch:
    types: [trigger-workflow]

jobs:
  publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Alpine builds
          # Note: No JDK builders currently support alpine with ARM
          - BUILD_IMAGE_DOCKERFILE: builds/alpine/Base.Dockerfile
            BUILD_IMAGE_TAG: bx
          - BUILD_IMAGE_DOCKERFILE: builds/alpine/Base.Web.Dockerfile
            BUILD_IMAGE_TAG: bx-web
          - BUILD_IMAGE_DOCKERFILE: builds/alpine/Base.StayAlive.Dockerfile
            BUILD_IMAGE_TAG: bx-stayalive

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Setup Builds
        id: setup
        env:
          DOCKER_IMAGE: 233317242204.dkr.ecr.us-east-1.amazonaws.com/tryboxlang
          BUILD_IMAGE_TAG: ${{ matrix.BUILD_IMAGE_TAG }}
          BX_VERSION: 1.0.0
          IMAGE_VERSION: 0.0.1
        run: |
          # Tag Builds
          if [[ $GITHUB_REF == refs/tags/* ]]; then

            if [[ $BUILD_IMAGE_TAG == latest ]]; then
              BUILD_IMAGE_TAG="${GITHUB_REF#refs/tags/v}"
            else
              BUILD_IMAGE_TAG="${BUILD_IMAGE_TAG}-${GITHUB_REF#refs/tags/v}"
            fi

          elif [[ $GITHUB_REF == 'refs/heads/development' ]]; then

            # Snapshot builds
            BUILD_IMAGE_TAG="${BUILD_IMAGE_TAG}-snapshot"

          fi

          TAGS="${DOCKER_IMAGE}:${BUILD_IMAGE_TAG}"

          # if [[ ${BUILD_IMAGE_TAG} == *"alpine"* ]]; then
          ARCH_PLATFORMS=linux/amd64
          # else
            # ARCH_PLATFORMS=linux/amd64,linux/arm64/v8
          # fi

          # Set output parameters.
          echo "arch_platforms=${ARCH_PLATFORMS}" >> $GITHUB_ENV
          echo "image_version=${IMAGE_VERSION}" >> $GITHUB_ENV
          echo "bx_version=${BX_VERSION}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${TAGS}" >> $GITHUB_ENV

      # - name: DockerHub Login
      #   if: github.event_name != 'pull_request'
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_SECRET }}
        with:
          # role-to-assume: arn:aws:iam::123456789012:role/my-github-actions-role
          aws-region: us-east-1
          mask-aws-account-id: "false"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_SECRET }}

      # - name: Test
      #   env:
      #     BX_VERSION: ${{ env.bx_version }}
      #     DOCKER_BUILDKIT: 1
      #     COMPOSE_DOCKER_CLI_BUILD: 1
      #     BUILD_IMAGE_DOCKERFILE: ${{ matrix.BUILD_IMAGE_DOCKERFILE }}
      #   run: |
      #     docker compose -f docker-compose.test.yml up --build --exit-code-from sut
      #     docker compose -f docker-compose.secret-test.yml up --build --exit-code-from sut

      - name: Build Final
        uses: docker/build-push-action@v4
        env:
          DOCKER_BUILDKIT: 1
        with:
          provenance: false
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ${{ matrix.BUILD_IMAGE_DOCKERFILE }}
          build-args: BX_VERSION=${{ env.bx_version }}
          platforms: ${{ env.arch_platforms }}
          push: true
          tags: ${{ env.IMAGE_TAG }}
